<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="utf-8" />
<title>DCG Planner 2026 ‚Äì St Peter‚Äôs</title>
<meta name="viewport" content="width=device-width, initial-scale=1" />
<style>
:root{
  --bg:#f5f7fb; --card:#fff; --ink:#111; --muted:#6b7280;
  --accent:#2563eb; --accentDark:#1e40af;
  --grid:#e5e7eb; --line:#d1d5db; --head:#f8fafc;
}
*{box-sizing:border-box}
body{margin:0;padding:20px;background:var(--bg);color:var(--ink);font-family:Helvetica,Arial,sans-serif;}
.wrap{margin:0 auto}
.card{background:var(--card);border-radius:14px;padding:18px;box-shadow:0 10px 30px rgba(0,0,0,.08);margin:0 auto 16px auto;width:90vw}
h2{margin:0 0 8px 0;font-size:22px}
button,input{font-family:inherit}
input[type=number]{width:100%;padding:10px 12px;font-size:18px;border:1px solid var(--grid);border-radius:12px;background:#fff}
button{background:var(--accent);color:#fff;border:none;cursor:pointer;padding:10px 14px;border-radius:12px;font-size:18px}
button:hover{background:var(--accentDark)}
.page{width:210mm;min-height:297mm;background:#fff;color:#000;margin:0 auto 12px auto;padding:10mm 0 0 0;page-break-after:always;position:relative}
.week-grid th{border:1px solid #000;padding:4mm;text-align:center;width:20%}
.week-grid td{border:1px solid #000;padding:0;vertical-align:top;text-align:left;width:20%;position:relative}
.slot{position:relative;min-height:40mm;overflow:hidden}
.hl{position:absolute;top:0;left:0;font-weight:700;font-size:17px;line-height:1.1;border-radius:3px;max-width:100%;word-wrap:break-word;display:inline-block;text-align:left;padding:1.5mm 2mm}
.frac{position:absolute;top:2px;right:4px;font-size:11px;color:#666;font-weight:400}
.divider{height:6mm;background:#f2f3f6;border:none}
.cover{position:absolute;top:0;left:0;right:0;bottom:0;width:100%;height:100%;display:flex;flex-direction:column;justify-content:center;align-items:center;text-align:center}
.cover h1{font-size:72px;margin:0;font-weight:700}
.cover h2{font-size:32px;margin:10px 0 20px 0;font-weight:500}
.cover img{width:120mm;max-width:90%;height:auto;margin-top:10mm}
.event-label{display:flex;align-items:center;justify-content:center;width:100%;height:100%;background:#eceff3;color:#555;font-style:italic;text-align:center;border-radius:2px;padding:3mm}
.summary-table{border-collapse:collapse;width:100%;margin-top:20px;table-layout:fixed}
.summary-table th,.summary-table td{border:1px solid #000;padding:6px;text-align:center;font-size:14px;word-wrap:break-word}
.summary-table th{background:#f2f2f2}
@media print{
  body{background:#fff;padding:0}
  .card,.no-print{display:none!important}
  *{-webkit-print-color-adjust:exact!important;print-color-adjust:exact!important;color-adjust:exact!important}
  @page{size:A4 portrait;margin:8mm}
}
</style>
</head>
<body>
<div class="wrap">

  <div class="card">
    <h2>Print & File</h2>
    <div id="printControls" style="display:flex;gap:10px;flex-wrap:wrap;margin:8px 0;"></div>

    <h3 style="margin-top:16px;">Extra Pages</h3>
    <table style="width:100%;border-collapse:collapse;table-layout:fixed;margin-top:8px;">
      <thead><tr><th style="text-align:left;">Page Type</th><th style="text-align:center;">Number of Pages</th></tr></thead>
      <tbody>
        <tr><td>Lined Pages (10 mm ruled)</td><td><input id="linedPages" type="number" min="0" max="50" value="2" style="width:80px;text-align:center;"></td></tr>
        <tr><td>Grid Pages (10 mm squares)</td><td><input id="gridPages" type="number" min="0" max="50" value="2" style="width:80px;text-align:center;"></td></tr>
        <tr><td>Blank Note Pages</td><td><input id="blankPages" type="number" min="0" max="50" value="2" style="width:80px;text-align:center;"></td></tr>
      </tbody>
    </table>

    <div style="margin-top:15px;display:flex;justify-content:flex-end;gap:12px;flex-wrap:wrap;">
      <button id="loadBtn">üìÇ Load Planner</button>
      <button id="saveBtn">üíæ Save Planner</button>
      <button id="printBtn">üñ®Ô∏è Print / PDF</button>
      <input type="file" id="loadFile" accept=".csv" style="display:none;">
    </div>
  </div>

  <div id="pages"></div>
</div>

<script>
/* ===== BASE DATA ===== */
const PALETTE = [
  '#FFB3BA','#FFDFBA','#FFFFBA','#BAFFC9','#BAE1FF','#E0BBFF',
  'repeating-linear-gradient(135deg,#FFB3BA 0%,#FFB3BA 20%,#BAE1FF 20%,#BAE1FF 40%)',
  'repeating-linear-gradient(135deg,#BAFFC9 0%,#BAFFC9 20%,#E0BBFF 20%,#E0BBFF 40%)',
  'repeating-linear-gradient(135deg,#FFFFBA 0%,#FFFFBA 20%,#A8D0FF 20%,#A8D0FF 40%)'
];

const DEFAULT_TERMS=[
 {term:1,start:'2026-02-02',weeks:9,startDay:1},
 {term:2,start:'2026-04-20',weeks:10,startDay:5},
 {term:3,start:'2026-07-20',weeks:10,startDay:2},
 {term:4,start:'2026-10-12',weeks:9,startDay:6},
];
let termConfig=JSON.parse(JSON.stringify(DEFAULT_TERMS));
let termInclude=[true,true,true,true];

/* rotation grid (subjects only; values like "9SCI-L4") */
let gridSub=Array.from({length:6},()=>Array(7).fill(''));

/* Duty text entries by rotation day (1..7) */
let dutyTextP2 = Array(7).fill('');
let dutyTextP4 = Array(7).fill('');

/* Fixed holidays (skip=true, whole day) */
const FIXED_EVENTS=[
 {include:true,skip:true,name:'',date:'2026-02-02',periods:[1,1,1,1,1,1]},
 {include:true,skip:true,name:'Waitangi Day',date:'2026-02-06',periods:[1,1,1,1,1,1]},
 {include:true,skip:true,name:'Athletics Day',date:'2026-02-25',periods:[1,1,1,1,1,1]},
 {include:true,skip:true,name:'Leave Weekend',date:'2026-03-09',periods:[1,1,1,1,1,1]},
 {include:true,skip:true,name:'Parent Conferences',date:'2026-04-02',periods:[1,1,1,1,1,1]},
 {include:true,skip:true,name:'Good Friday',date:'2026-04-03',periods:[1,1,1,1,1,1]},
 {include:true,skip:true,name:'Teacher Only Day',date:'2026-04-20',periods:[1,1,1,1,1,1]},
 {include:true,skip:true,name:'ANZAC Day',date:'2026-04-27',periods:[1,1,1,1,1,1]},
 {include:true,skip:true,name:'Leave Weekend',date:'2026-05-29',periods:[1,1,1,1,1,1]},
 {include:true,skip:true,name:"King's Birthday",date:'2026-06-01',periods:[1,1,1,1,1,1]},
 {include:true,skip:true,name:'Teacher Only Day',date:'2026-07-20',periods:[1,1,1,1,1,1]},
 {include:true,skip:true,name:'Parent Conferences',date:'2026-08-21',periods:[1,1,1,1,1,1]},
 {include:true,skip:true,name:'Leave Weekend',date:'2026-08-24',periods:[1,1,1,1,1,1]},
 {include:true,skip:true,name:'Leave Weekend',date:'2026-08-25',periods:[1,1,1,1,1,1]},
 {include:true,skip:true,name:'Labour Day',date:'2026-10-26',periods:[1,1,1,1,1,1]},
 {include:true,skip:true,name:'Ends of Year',date:'2026-12-10',periods:[1,1,1,1,1,1]},
 {include:true,skip:true,name:'End of Year',date:'2026-12-11',periods:[1,1,1,1,1,1]},
];

/* Custom events loaded from CSV (skip=false) */
let events=[];

/* ===== UTILITIES ===== */
function allEvents(){return[...FIXED_EVENTS,...events];}
function addDays(d,n){const x=new Date(d);x.setDate(x.getDate()+n);return x;}
function strip(d){const z=new Date(d);return new Date(z.getFullYear(),z.getMonth(),z.getDate());}
function sameDate(a,b){return strip(a).getTime()===strip(b).getTime();}
function isSkipped(date){return allEvents().some(ev=>ev.include&&ev.skip&&sameDate(date,ev.date));}
function ddmmyyyyToISO(dmy){
  if(!dmy) return dmy;
  if(/^\d{4}-\d{2}-\d{2}$/.test(dmy)) return dmy;
  const m=dmy.match(/^(\d{1,2})[\/\-](\d{1,2})[\/\-](\d{4})$/);
  if(!m) return dmy;
  const dd=String(m[1]).padStart(2,'0');
  const mm=String(m[2]).padStart(2,'0');
  return `${m[3]}-${mm}-${dd}`;
}
function deltaTeachingDaysSkipAware(s,e){
  s=strip(s);e=strip(e);
  if(e<s) return -deltaTeachingDaysSkipAware(e,s);
  let c=0,x=new Date(s);
  while(x<=e){const w=x.getDay();if(w>=1&&w<=5&&!isSkipped(x))c++;x.setDate(x.getDate()+1);}
  return c-1;
}
function computeRotationDay(dateObj,termStart,startDay){
  const k=deltaTeachingDaysSkipAware(termStart,dateObj);
  const idx=((startDay-1)+k)%7; return ((idx+7)%7)+1;
}
const periods=['P1','P2','P3','P4','P5','P6'];

/* ===== SUBJECT COLOURING (by base subject before '-') ===== */
let subjects={}; // baseName -> color
function baseSubject(name){
  if(!name) return '';
  const i=name.indexOf('-');
  return i>0 ? name.slice(0,i).trim() : name.trim();
}
function rebuildSubjectsFromGrid(){
  subjects={};
  const set=new Set();
  for(let r=0;r<6;r++) for(let c=0;c<7;c++){
    const s=(gridSub[r][c]||'').trim();
    if(s) set.add(baseSubject(s));
  }
  Array.from(set).sort().forEach((name,idx)=>subjects[name]=PALETTE[idx%PALETTE.length]);
}

/* ===== EVENTS IMPACT ===== */
function eventsAffecting(dateObj,periodIndex){
  return allEvents()
    .filter(ev=>ev.include && !ev.skip && sameDate(dateObj,ev.date) && ev.periods[periodIndex])
    .map(ev=>ev.name);
}

/* ===== FRACTION HELPERS (by base subject) ===== */
function countUnaffectedForBase(base, termStart){
  let total=0;
  const tObj=termConfig.find(t=>strip(t.start).getTime()===strip(termStart).getTime());
  if(!tObj) return 0;
  for(let w=0;w<tObj.weeks;w++){
    for(let d=0;d<5;d++){
      const date=addDays(new Date(tObj.start), w*7+d);
      if(isSkipped(date)) continue;
      const rot=computeRotationDay(date, new Date(tObj.start), tObj.startDay);
      for(let p=0;p<6;p++){
        const s=gridSub[p][rot-1];
        if(baseSubject(s)===base){
          const isFriP1=(d===4 && p===0); // Friday (0=Sun...4=Thu? careful) ‚Äî we used d loop 0..4 mapping Mon..Fri -> dayOfWeek? We'll keep PD rule below via weekday check instead.
          const evHits=eventsAffecting(date,p);
          const dow=strip(date).getDay(); // 1..5 Mon..Fri
          if(dow===5 && p===0) continue;        // PD Friday P1 is not a teachable contact
          if(evHits.length===0) total++;
        }
      }
    }
  }
  return total;
}
function countSoFarForBase(base, termStart, date, periodIndex){
  let count=0;
  const tObj=termConfig.find(t=>strip(t.start).getTime()===strip(termStart).getTime());
  if(!tObj) return 0;
  const endDate=strip(date);
  for(let w=0;w<tObj.weeks;w++){
    for(let d=0;d<5;d++){
      const curr=strip(addDays(new Date(tObj.start),w*7+d));
      if(curr>endDate) return count;
      if(isSkipped(curr)) continue;
      const rot=computeRotationDay(curr, new Date(tObj.start), tObj.startDay);
      for(let p=0;p<6;p++){
        const s=gridSub[p][rot-1];
        if(baseSubject(s)===base){
          const dow=curr.getDay();
          if(dow===5 && p===0) continue; // PD Friday P1
          const evHits=eventsAffecting(curr,p);
          if(evHits.length===0){
            count++;
            if(sameDate(curr,endDate) && p===periodIndex) return count;
          }
        }
      }
    }
  }
  return count;
}

/* ===== RENDER ===== */
function renderPrintControls(){
  const host=document.getElementById('printControls'); host.innerHTML='';
  termConfig.forEach((t,i)=>{
    const lbl=document.createElement('label');
    lbl.style.border='1px solid var(--grid)'; lbl.style.padding='6px 10px'; lbl.style.borderRadius='10px'; lbl.style.background='#fff';
    lbl.innerHTML=`<input type="checkbox" ${termInclude[i]?'checked':''} style="transform:scale(1.2);margin-right:8px;"> Include Term ${t.term}`;
    const cb=lbl.querySelector('input');
    cb.onchange=e=>{termInclude[i]=e.target.checked; renderPages();};
    host.appendChild(lbl);
  });
}

function renderPages(){
  const out=document.getElementById('pages'); out.innerHTML='';

  // Cover
  const cover=document.createElement('div'); cover.className='page';
  cover.innerHTML=`<div class="cover"><h1>Name__________</h1><h2>St Peter‚Äôs Planner</h2><img src="Crest.png" alt="Crest"></div>`;
  out.appendChild(cover);

  // Timetable image + preview table
  const timg=document.createElement('div'); timg.className='page';
  timg.innerHTML = `<div class="cover">
      <div>
        <img src="Timetable.png" alt="Timetable" style="width:204mm;max-width:95%;height:auto;margin-top:10mm;">
        <div style="margin-top:16mm;">${plainTimetableTable()}</div>
      </div>
    </div>`;
  out.appendChild(timg);

  // Summary page
  const summary=document.createElement('div'); summary.className='page';
  summary.innerHTML=generateSummaryTable();
  out.appendChild(summary);

  // Weekly planner pages
  termConfig.forEach((T,i)=>{
    if(!termInclude[i]) return;
    const start=new Date(T.start+'T00:00:00');
    for(let w=0;w<T.weeks;w++){
      const mon=addDays(start,w*7);
      out.appendChild(buildPage(mon,start,T.startDay,T.term,w+1,true));
      out.appendChild(buildPage(mon,start,T.startDay,T.term,w+1,false));
    }
  });

  // Extra pages
  const blankCount=parseInt(document.getElementById('blankPages')?.value||0);
  const gridCount=parseInt(document.getElementById('gridPages')?.value||0);
  const linedCount=parseInt(document.getElementById('linedPages')?.value||0);

  for(let i=0;i<linedCount;i++){
    const pg=document.createElement('div'); pg.className='page';
    pg.innerHTML=`<div class="cover" style="background:linear-gradient(to bottom,#ccc 1px,transparent 1px) 0 0/100% 10mm;"></div>`;
    out.appendChild(pg);
  }
  for(let i=0;i<gridCount;i++){
    const pg=document.createElement('div'); pg.className='page';
    pg.innerHTML=`<div class="cover" style="background:
      linear-gradient(to right,#ccc 1px,transparent 1px) 0 0/10mm 10mm,
      linear-gradient(to bottom,#ccc 1px,transparent 1px) 0 0/10mm 10mm;"></div>`;
    out.appendChild(pg);
  }
  for(let i=0;i<blankCount;i++){
    const pg=document.createElement('div'); pg.className='page';
    pg.innerHTML=`<div class="cover" style="background:#fff;"></div>`;
    out.appendChild(pg);
  }
}

function plainTimetableTable(){
  let html='<table class="summary-table" style="table-layout:fixed;"><thead><tr><th>Period\\Day</th>'+
           ['Day 1','Day 2','Day 3','Day 4','Day 5','Day 6','Day 7'].map(d=>`<th>${d}</th>`).join('')+
           '</tr></thead><tbody>';
  for(let r=0;r<6;r++){
    html+=`<tr><th>${periods[r]}</th>`;
    for(let c=0;c<7;c++){
      const s=(gridSub[r][c]||'').trim();
      const base=baseSubject(s);
      const color=base&&subjects[base]?subjects[base]:'#fff';
      html+=`<td style="padding:6px;"><div style="display:inline-block;padding:4px 6px;border-radius:4px;background:${color};">${s}</div></td>`;
    }
    html+='</tr>';
  }
  // Duty preview rows (labels only)
  html+=`<tr><td style="background:#f2f3f6;font-weight:700;">Duty</td>${Array(7).fill('<td style="background:#f2f3f6;"></td>').join('')}</tr>`;
  html+=`<tr><td style="background:#f2f3f6;font-weight:700;">Duty</td>${Array(7).fill('<td style="background:#f2f3f6;"></td>').join('')}</tr>`;
  html+='</tbody></table>';
  return html;
}

function generateSummaryTable() {
  let html = '<h2>Class Contact Summary</h2><table class="summary-table"><tr><th>Subject</th>';
  for (let t = 1; t <= 4; t++) html += `<th>Term ${t}</th>`;
  html += '<th>Total</th></tr>';

  const bases = Object.keys(subjects);
  bases.forEach(base => {
    let yearTotal = 0, yearPossible = 0, yearHours = 0;
    html += `<tr><td>${base}</td>`;

    for (let ti = 0; ti < 4; ti++) {
      const T = termConfig[ti];
      if (!termInclude[ti]) { html += '<td>-</td>'; continue; }
      const start = new Date(T.start);
      let total = 0, affected = 0;

      for (let w = 0; w < T.weeks; w++) {
        for (let day = 0; day < 5; day++) {
          const current = addDays(start, w * 7 + day);
          const dow = strip(current).getDay(); // 1‚Äì5 Mon‚ÄìFri
          const fullDay = allEvents().some(ev => ev.include && ev.skip && sameDate(current, ev.date));
          if (fullDay) continue;
          const rot = computeRotationDay(current, start, T.startDay);
          for (let p = 0; p < 6; p++) {
            const s = gridSub[p][rot - 1];
            if (baseSubject(s) === base) {
              total++;

              // Determine if this period is affected by ANY event (fixed or CSV)
              let evHit = allEvents().some(ev =>
                ev.include &&
                !ev.skip &&
                sameDate(current, ev.date) &&
                ev.periods[p]
              );

              // Friday PD rule
              if (!evHit && dow === 5 && p === 0) evHit = true;

              if (evHit) affected++;
            }
          }
        }
      }

      const unaffected = total - affected;
      const hours = (unaffected * 50) / 60;
      yearTotal += unaffected;
      yearPossible += total;
      yearHours += hours;

      html += `<td>${unaffected}/${total} <span style="color:#555;">(${hours.toFixed(0)}Hr)</span></td>`;
    }

    html += `<td>${yearTotal}/${yearPossible} <span style="color:#555;">(${yearHours.toFixed(0)}Hr)</span></td></tr>`;
  });

  html += '</table>';

  // ===== TERM DATES SECTION =====
  html += '<h3 style="margin-top:20px;">Term Dates</h3><ul style="font-size:14px;line-height:1.5;">';
  termConfig.forEach(T => {
    const start = new Date(T.start);
    const end = addDays(start, T.weeks * 7 - 1);
    const fmt = d => d.toLocaleDateString('en-NZ', { day: 'numeric', month: 'long' });
    html += `<li>Term ${T.term}: ${fmt(start)} to ${fmt(end)} (${T.weeks} weeks)</li>`;
  });
  html += '</ul>';

  // ===== EVENTS & HOLIDAYS SECTION =====
  html += '<h3 style="margin-top:20px;">Key Dates & Events</h3>';
  const all = allEvents().filter(ev => ev.include).sort((a, b) => new Date(a.date) - new Date(b.date));

  termConfig.forEach(T => {
    const start = new Date(T.start);
    const end = addDays(start, T.weeks * 7);
    const inTerm = all.filter(ev => {
      const d = new Date(ev.date);
      return d >= start && d <= end;
    });

    if (inTerm.length > 0) {
      html += `<h4 style="margin:10px 0 6px 0;">Term ${T.term}</h4><ul style="font-size:14px;line-height:1.4;">`;
      inTerm.forEach(ev => {
        const d = new Date(ev.date);
        const dateStr = d.toLocaleDateString('en-NZ', { day: 'numeric', month: 'long' });
        if (ev.skip) {
          html += `<li>${dateStr} ‚Äì ${ev.name || 'Holiday'} (all day)</li>`;
        } else {
          const periods = ev.periods
            .map((v, i) => (v ? i + 1 : null))
            .filter(Boolean)
            .join(',');
          html += `<li>${dateStr} ‚Äì ${ev.name} (Periods ${periods})</li>`;
        }
      });
      html += '</ul>';
    }
  });

  return html;
}


function buildPage(monday, termStart, startDay, termNumber, weekNumber, isFirst){
  const page=document.createElement('div');
  page.className='page '+(isFirst?'right-bind':'left-bind');

  const tbl=document.createElement('table'); tbl.className='week-grid';
  const thead=document.createElement('thead'); const hr=document.createElement('tr');

  const cols=isFirst
    ? [['Mon', monday], ['Tue', addDays(monday,1)], ['Wed', addDays(monday,2)]]
    : [['Thu', addDays(monday,3)], ['Fri', addDays(monday,4)], [`Weekend (T${termNumber}-W${weekNumber})`, null]];

  cols.forEach(([label,date])=>{
    const th=document.createElement('th');
    if(date){
      const skipped=isSkipped(date);
      const dateStr=date.toLocaleDateString('en-NZ',{day:'numeric',month:'short'});
      if(skipped){
        th.textContent=`${label} ‚Äì ${dateStr}`;
        th.style.background='#e5e7eb'; th.style.color='#777'; th.style.fontStyle='italic';
      }else{
        const dayNum=computeRotationDay(date,termStart,startDay);
        th.textContent=`${label} ‚Äì ${dateStr} ‚Äì Day ${dayNum}`;
      }
    }else th.textContent=label;
    hr.appendChild(th);
  });
  thead.appendChild(hr); tbl.appendChild(thead);

  const tbody=document.createElement('tbody');
  for(let r=0;r<2;r++) tbody.appendChild(rowCells(cols,r,termStart,startDay));
  tbody.appendChild(dutyDividerRow(cols,termStart,startDay,'p2'));
  for(let r=2;r<4;r++) tbody.appendChild(rowCells(cols,r,termStart,startDay));
  tbody.appendChild(dutyDividerRow(cols,termStart,startDay,'p4'));
  for(let r=4;r<6;r++) tbody.appendChild(rowCells(cols,r,termStart,startDay));

  // notes
  const notes=document.createElement('tr');
  cols.forEach(()=>{ const td=document.createElement('td'); td.style.height='25mm'; td.style.background='#f9fafb'; td.style.borderTop='2px solid #000'; td.innerHTML='<div style="padding:3mm;font-style:italic;color:#555;">Notes...</div>'; notes.appendChild(td);});
  tbody.appendChild(notes);

  tbl.appendChild(tbody); page.appendChild(tbl);
  return page;
}

function rowCells(cols, periodIndex, termStart, startDay){
  const tr=document.createElement('tr');
  cols.forEach(([label,date])=>{
    const td=document.createElement('td');
    const div=document.createElement('div'); div.className='slot';

    if(date){
      const skipped=isSkipped(date);
      const rot=computeRotationDay(date,termStart,startDay);
      const dow=strip(date).getDay(); // 1..5 Mon..Fri

      // Friday P1 PD rule (unless replaced by an event)
      if(dow===5 && periodIndex===0){
        const eventsToday=allEvents().filter(ev=>ev.include && sameDate(date,ev.date)).map(ev=>ev.name);
        const pd=document.createElement('div'); pd.className='event-label';
        pd.textContent = eventsToday.length ? eventsToday.join(' / ') : 'Professional Development';
        div.appendChild(pd);
        td.appendChild(div); tr.appendChild(td); return;
      }

      if(skipped){
        const names=allEvents().filter(ev=>ev.include && sameDate(date,ev.date)).map(ev=>ev.name);
        if(names.length){
          const evDiv=document.createElement('div'); evDiv.className='event-label'; evDiv.textContent=names.join(' / ');
          div.appendChild(evDiv);
        }
      }else{
        const hits=eventsAffecting(date,periodIndex);
        if(hits.length){
          // A: replace subject with event label
          const evDiv=document.createElement('div'); evDiv.className='event-label'; evDiv.textContent=hits.join(' / ');
          div.appendChild(evDiv);
        }else{
          const s=gridSub[periodIndex]?.[rot-1]||'';
          if(s){
            const base=baseSubject(s);
            const span=document.createElement('span'); span.className='hl'; span.textContent=s;
            if(base in subjects) span.style.background=subjects[base];
            div.appendChild(span);

            // fraction top-right for this base subject
            const total=countUnaffectedForBase(base, termStart);
            const count=countSoFarForBase(base, termStart, date, periodIndex);
            const frac=document.createElement('div'); frac.className='frac'; frac.textContent=`${count}/${total}`;
            div.appendChild(frac);
          }
        }
      }
    }

    td.appendChild(div); tr.appendChild(td);
  });
  return tr;
}

function dutyDividerRow(cols,termStart,startDay,which){
  const tr=document.createElement('tr');
  cols.forEach(([label,date])=>{
    const td=document.createElement('td'); td.className='divider'; td.style.background='#f2f3f6';
    if(date && !isSkipped(date)){
      const rot=computeRotationDay(date,termStart,startDay);
      const txt=(which==='p2')?dutyTextP2[rot-1]:dutyTextP4[rot-1];
      if(txt && txt.trim()){
        const d=document.createElement('div'); d.textContent=txt; d.style.fontStyle='italic'; d.style.color='#333'; d.style.textAlign='center';
        td.appendChild(d);
      }
    }
    tr.appendChild(td);
  });
  return tr;
}

/* ===== CSV SAVE (readable format) ===== */
function savePlannerPrettyCSV(){
  let csv='Period\\Day,Day 1,Day 2,Day 3,Day 4,Day 5,Day 6,Day 7,,Events,Name,Date,Periods affected\n';

  for(let r=0;r<6;r++){
    const row=[periods[r]];
    for(let c=0;c<7;c++) row.push((gridSub[r][c]||'').replace(/,/g,' '));
    csv+=row.join(',')+',,,,\n';
    if(r===1) csv+=['Duty',...dutyTextP2.map(x=>x.replace(/,/g,' ')),',,,'].join(',')+'\n';
    if(r===3) csv+=['Duty',...dutyTextP4.map(x=>x.replace(/,/g,' ')),',,,'].join(',')+'\n';
  }
  // events header
  csv+=',,,,,,,,'+['Events','Name','Date','Periods affected'].join(',')+'\n';
  events.forEach(ev=>{
    const plist=ev.periods.map((v,i)=>v?i+1:null).filter(Boolean).join(',');
    csv+=',,,,,,,,,'+[ev.name, ev.date, plist].join(',')+'\n';
  });

  const blob=new Blob([csv],{type:'text/csv'});
  const url=URL.createObjectURL(blob);
  const a=document.createElement('a'); a.href=url; a.download='planner_pretty.csv';
  document.body.appendChild(a); a.click(); document.body.removeChild(a); URL.revokeObjectURL(url);
  alert('‚úÖ Planner saved.');
}
function loadPlannerPrettyCSV(text) {
  const delim = text.includes('\t') ? '\t' : ',';
  const lines = text.trim().split(/\r?\n/);

  gridSub = Array.from({ length: 6 }, () => Array(7).fill(''));
  dutyTextP2 = Array(7).fill('');
  dutyTextP4 = Array(7).fill('');
  events = [];

  for (let i = 1; i < lines.length; i++) {
    const parts = lines[i].split(delim).map(s => s.trim());
    const label = parts[0];

    // === Timetable section (same as before)
    if (/^P[1-6]$/.test(label)) {
      const r = parseInt(label.slice(1)) - 1;
      for (let c = 0; c < 7; c++) gridSub[r][c] = parts[c + 1] || '';
    } 
    else if (label === 'Duty') {
      const vals = parts.slice(1, 8).map(s => s.trim());
      if (dutyTextP2.every(x => !x)) dutyTextP2 = vals;
      else dutyTextP4 = vals;
    }

    // === Events section
    else if (/^events$/i.test(label)) {
      for (let r = i + 2; r < Math.min(i + 52, lines.length); r++) {
        const row = lines[r].split(delim).map(s => s.trim());
        if (!row[0]) continue;
        const name = row[0];
        const date = ddmmyyyyToISO(row[1]);
        const periods = (row[2] || '').split('|')
          .map(x => parseInt(x))
          .filter(n => n >= 1 && n <= 6);

        if (name && date && periods.length > 0) {
          const periodsArr = [0, 0, 0, 0, 0, 0];
          periods.forEach(p => { periodsArr[p - 1] = 1; });
          events.push({ name, date, periods: periodsArr, include: true, skip: false });
        }
      }
      break;
    }
  }

  rebuildSubjectsFromGrid();
  renderPrintControls();
  renderPages();
  alert(`‚úÖ Planner loaded (${events.length} events found).`);
}

// Helper to convert "dd/mm/yyyy" to "yyyy-mm-dd"
function ddmmyyyyToISO(dmy) {
  if (!dmy) return '';
  dmy = dmy.trim();
  const m = dmy.match(/^(\d{1,2})[\/\-](\d{1,2})[\/\-](\d{4})$/);
  if (!m) return dmy;
  const [_, d, mo, y] = m;
  return `${y}-${mo.padStart(2, '0')}-${d.padStart(2, '0')}`;
}

/* ===== INIT ===== */
function init(){
  renderPrintControls();
  rebuildSubjectsFromGrid();
  renderPages();

  document.getElementById('printBtn').onclick=()=>window.print();
  ['blankPages','gridPages','linedPages'].forEach(id=>{
    const el=document.getElementById(id); if(el) el.oninput=()=>renderPages();
  });
}

window.onload=function(){
  init();
  const saveBtn=document.getElementById('saveBtn');
  const loadBtn=document.getElementById('loadBtn');
  const loadFile=document.getElementById('loadFile');

  if(saveBtn) saveBtn.addEventListener('click', savePlannerPrettyCSV);
  if(loadBtn) loadBtn.addEventListener('click', ()=>{ loadFile.value=''; loadFile.click(); });
  if(loadFile){
    loadFile.addEventListener('change', e=>{
      const file=e.target.files[0]; if(!file) return;
      const reader=new FileReader();
      reader.onload=ev=>loadPlannerPrettyCSV(ev.target.result);
      reader.readAsText(file);
    });
  }
};
</script>
</body>
</html>
